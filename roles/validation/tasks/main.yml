---
# Post-Deployment Validation Role
# Comprehensive validation of deployed Gonka cluster health and services

- name: Determine cluster name for all hosts
  set_fact:
    cluster_name: "{{ group_names | select('match', 'cluster[0-9]+') | first }}"

- name: Validate common deployment configuration files
  stat:
    path: "{{ gonka_deploy_dir }}/{{ item }}"
  loop:
    - config.env
    - docker-compose.yml
    - docker-compose.mlnode.yml
  register: config_files

- name: Check if common config files exist
  assert:
    that: item.stat.exists
    fail_msg: "Required config file {{ item.item }} is missing"
  loop: "{{ config_files.results | default([]) }}"
  when: config_files.results is defined

- name: Validate network node specific configuration files
  stat:
    path: "{{ gonka_deploy_dir }}/{{ item }}"
  loop:
    - node-config-generated.json
  register: network_config_files
  when: "inventory_hostname in groups[cluster_name + '_network_node']"

- name: Check if network node config files exist
  assert:
    that: item.stat.exists
    fail_msg: "Required network node config file {{ item.item }} is missing"
  loop: "{{ network_config_files.results | default([]) }}"
  when: network_config_files.results is defined and inventory_hostname in groups[cluster_name + '_network_node']

- name: Validate firewall configuration on network node (required ports)
  shell: ufw status | grep -E "(8000|26657|9100|9300)"
  register: firewall_check_network
  changed_when: false
  failed_when: firewall_check_network.rc != 0
  when: inventory_hostname in groups[cluster_name + '_network_node']
  become: true

- name: Validate firewall configuration on ML nodes (restricted ports)
  shell: ufw status | grep -E "(5000|8080)"
  register: firewall_check_ml
  changed_when: false
  failed_when: firewall_check_ml.rc != 0
  when: inventory_hostname in groups[cluster_name + '_ml_nodes']
  become: true

- name: Check deployed containers are running
  shell:
    cmd: docker ps --format "table {% raw %}{{.Names}}\t{{.Status}}\t{{.Ports}}{% endraw %}"
  register: containers
  changed_when: false
  failed_when: containers.stdout_lines | length < 2
  become: true

- name: Validate network node API endpoints
  uri:
    url: "{{ item }}"
    method: GET
    timeout: 10
  loop:
    - "http://{{ ansible_host }}:{{ api_port }}/health"
    - "http://{{ ansible_host }}:{{ api_port }}/v1/status"
  register: api_tests
  ignore_errors: true
  when: "inventory_hostname in groups[cluster_name + '_network_node']"

- name: Check API endpoint responses
  assert:
    that: item.status == 200
    fail_msg: "API endpoint {{ item.url }} returned status {{ item.status }}"
  loop: "{{ api_tests.results | default([]) }}"
  when: "inventory_hostname in groups[cluster_name + '_network_node'] and api_tests.results is defined"

- name: Validate ML node management state endpoint
  uri:
    url: "http://localhost:{{ management_port }}/api/v1/state"
    method: GET
    timeout: 10
  register: ml_state
  when: "inventory_hostname in groups[cluster_name + '_ml_nodes']"

- name: Assert ML node management state is reachable
  assert:
    that: ml_state.status == 200
    fail_msg: "ML node {{ inventory_hostname }} management state endpoint returned status {{ ml_state.status }}"
  when: "inventory_hostname in groups[cluster_name + '_ml_nodes'] and ml_state is defined"

- name: Check blockchain synchronization (network nodes only)
  uri:
    url: "http://localhost:{{ rpc_port }}/status"
    method: GET
  register: sync_status
  failed_when: sync_status.json.result.sync_info.catching_up
  when: "inventory_hostname in groups[cluster_name + '_network_node']"

- name: Validate GPU utilization on ML nodes
  command: nvidia-smi --query-gpu=utilization.gpu --format=csv,noheader,nounits
  register: gpu_util
  changed_when: false
  when: "inventory_hostname in groups[cluster_name + '_ml_nodes']"

- name: Generate validation report
  debug:
    msg: |
      ✅ Post-Deployment Validation Report for {{ inventory_hostname }}
      📄 Config Files: {{ config_files.results | selectattr('stat.exists', 'equalto', true) | list | length }}/{{ config_files.results | length }} present
      🔥 Firewall: {{ (
        (inventory_hostname in groups[cluster_name + '_network_node'] and firewall_check_network is defined and firewall_check_network.rc == 0) or
        (inventory_hostname in groups[cluster_name + '_ml_nodes'] and firewall_check_ml is defined and firewall_check_ml.rc == 0)
      ) | ternary('CONFIGURED', 'NOT CONFIGURED') }}
      🐳 Containers: {{ containers.stdout_lines | length }} running
      {% if inventory_hostname in groups[cluster_name + '_network_node'] %}
      🌐 API Endpoints: {{ api_tests.results | selectattr('status', 'equalto', 200) | list | length }}/{{ api_tests.results | length }} responding
      ⛓️  Blockchain: {{ sync_status.json.result.sync_info.catching_up | ternary('SYNCING', 'SYNCED') if sync_status.json is defined else 'CHECKING' }}
      {% endif %}
      {% if inventory_hostname in groups[cluster_name + '_ml_nodes'] %}
      🎯 ML Inference: {{ ml_health.status == 200 | ternary('HEALTHY', 'UNHEALTHY') if ml_health.status is defined else 'CHECKING' }}
      🎮 GPU Utilization: {{ gpu_util.stdout | default('N/A') }}%
      {% endif %}
      🎯 Overall Status: POST-DEPLOYMENT VALIDATION {{ 'PASSED' if (
        config_files.results | selectattr('stat.exists', 'equalto', true) | list | length == config_files.results | length and
        (
          (inventory_hostname in groups[cluster_name + '_network_node'] and firewall_check_network is defined and firewall_check_network.rc == 0) or
          (inventory_hostname in groups[cluster_name + '_ml_nodes'] and firewall_check_ml is defined and firewall_check_ml.rc == 0)
        ) and
        containers.stdout_lines | length >= 2
      ) else 'FAILED' }}
