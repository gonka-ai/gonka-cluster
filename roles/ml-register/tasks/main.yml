---
# ML Node Registration Role
# Register ALL ML nodes with the network node via local Admin API
# This role runs on the NETWORK NODE and registers all ML nodes in the cluster

- name: Determine cluster name
  set_fact:
    cluster_name: "{{ group_names | select('match', 'cluster[0-9]+') | first }}"

# Allow skipping specific ML hosts via skip_ml_hosts (list of inventory hostnames)
- name: Compute ML hosts to register for this cluster
  set_fact:
    ml_hosts_to_register: "{{ (groups[cluster_name + '_ml_nodes'] | default([])) | difference(skip_ml_hosts | default([])) }}"

# Pre-registration validation: Check ML node accessibility from network node
- name: Validate ML node accessibility from network node
  uri:
    url: "http://{{ item }}:{{ management_port }}/api/v1/state"
    method: GET
  loop: "{{ groups[cluster_name + '_ml_nodes'] | map('extract', hostvars, 'ansible_host') | list }}"
  loop: "{{ ml_hosts_to_register | map('extract', hostvars, 'ansible_host') | list }}"
  register: ml_node_validation
  when: "inventory_hostname in groups[cluster_name + '_network_node']"
  delegate_to: "{{ groups[cluster_name + '_network_node'][0] }}"

- name: Assert ML node state endpoint is reachable
  assert:
    that: item.status == 200
    fail_msg: "ML node {{ item.item }} state endpoint failed with status {{ item.status }}"
  loop: "{{ ml_node_validation.results | default([]) }}"
  when: "inventory_hostname in groups[cluster_name + '_network_node'] and ml_node_validation.results is defined"

- name: Display ML node validation results
  debug:
    msg: |
      âœ… ML Node {{ item.item }} is accessible from Network Node
      ðŸ“Š Status: {{ item.status }}
      ðŸ”— URL: http://{{ item.item }}:{{ management_port }}/api/v1/state
  loop: "{{ ml_node_validation.results | default([]) }}"
  when: "inventory_hostname in groups[cluster_name + '_network_node'] and ml_node_validation is defined"

# Register all ML nodes in the cluster (loop through them)
- name: Register all ML nodes with network node (local Admin API access)
  vars:
    assigned_model: "{{ cluster_models[cluster_name].ml_node_models[ ml_idx % (cluster_models[cluster_name].ml_node_models | length) ].model }}"
    registration_model_args: "{{ model_configs[assigned_model].args | default([]) }}"
    models_dict: "{{ {assigned_model: {'args': registration_model_args}} }}"
  uri:
    url: "http://localhost:9200/admin/v1/nodes"  # Local access only
    method: POST
    body_format: json
    body: |
      {
        "id": "{{ ml_host }}",
        "host": "{{ hostvars[ml_host]['ansible_host'] }}",
        "inference_port": {{ inference_port | int }},
        "poc_port": {{ management_port | int }},
        "max_concurrent": 500,
        "models": {{ models_dict | to_json }}
      }
  loop: "{{ ml_hosts_to_register }}"
  loop_control:
    loop_var: ml_host
    index_var: ml_idx
  register: registration_result
  when: "inventory_hostname in groups[cluster_name + '_network_node']"

- name: Assert ML node registration responses are 200
  assert:
    that: item.status == 200
    fail_msg: "Registration of ML node {{ item.ml_host }} failed with status {{ item.status }}"
  loop: "{{ registration_result.results | default([]) }}"
  when: "inventory_hostname in groups[cluster_name + '_network_node'] and registration_result.results is defined"

- name: Verify all ML nodes are registered (local Admin API access)
  uri:
    url: "http://localhost:9200/admin/v1/nodes"  # Local access only
    method: GET
  register: registered_nodes
  failed_when: "registered_nodes.json | length < groups[cluster_name + '_ml_nodes'] | length"
  when: "inventory_hostname in groups[cluster_name + '_network_node']"

- name: Display ML node registration success
  debug:
    msg: |
      âœ… All ML Nodes registered successfully from Network Node!
      ðŸ“‹ Cluster: {{ cluster_name }}
      ðŸ”— Network Node: {{ inventory_hostname }}
      ðŸ“Š Total registered: {{ registered_nodes.json | length }}
      ðŸŽ¯ ML Nodes: {{ groups[cluster_name + '_ml_nodes'] | join(', ') }}
  when: "inventory_hostname in groups[cluster_name + '_network_node']"
