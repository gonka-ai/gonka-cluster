---
# Docker Environment Preparation Role
# Configure Docker group and pull images

- name: Create docker group if it doesn't exist
  group:
    name: docker
    state: present
  become: true

- name: Add ubuntu user to docker group
  user:
    name: ubuntu
    groups: docker
    append: yes
  become: true

- meta: reset_connection

- name: Pause briefly after connection reset
  pause:
    seconds: 1

- name: Ensure Docker daemon.json includes iptables=false and NVIDIA runtime without losing other settings
  block:
    - name: Check if daemon.json exists
      stat:
        path: /etc/docker/daemon.json
      register: daemon_json_stat

    - name: Read existing daemon.json
      slurp:
        path: /etc/docker/daemon.json
      register: daemon_json_slurp
      when: daemon_json_stat.stat.exists

    - name: Parse existing daemon.json
      set_fact:
        existing_daemon_json: "{{ (daemon_json_slurp.content | b64decode | from_json) if daemon_json_stat.stat.exists else {} }}"
      when: daemon_json_stat.stat.exists

    - name: Build merged daemon.json
      set_fact:
        merged_daemon_json: "{{ (existing_daemon_json | default({})) | combine(desired_daemon_overrides, recursive=True) }}"
      vars:
        desired_daemon_overrides:
          iptables: false
          runtimes:
            nvidia:
              args: []
              path: nvidia-container-runtime

    - name: Write merged daemon.json
      copy:
        content: "{{ merged_daemon_json | to_nice_json }}"
        dest: /etc/docker/daemon.json
        mode: '0644'
      notify: restart docker
  become: true
  tags: ['docker-daemon']

- name: Pull all Docker images
  command: docker compose -f docker-compose.yml -f docker-compose.mlnode.yml pull
  args:
    chdir: "{{ gonka_deploy_dir }}"
  async: "{{ docker_timeout }}"
  poll: 20
  register: pull_result

- name: Verify NVIDIA runtime
  command: docker info
  register: docker_info
  failed_when: "'nvidia' not in docker_info.stdout"

- name: Show pulled images
  command: docker images --format "table {% raw %}{{.Repository}}{% endraw %}\t{% raw %}{{.Tag}}{% endraw %}\t{% raw %}{{.Size}}{% endraw %}"
  register: image_list
  changed_when: false

- name: Verify compose files are valid
  command: docker compose -f docker-compose.yml -f docker-compose.mlnode.yml config
  args:
    chdir: "{{ gonka_deploy_dir }}"
  register: compose_validation
  failed_when: compose_validation.rc != 0

- name: Display Docker preparation completion
  debug:
    msg: |
      ‚úÖ Docker environment ready on {{ inventory_hostname }}
      üê≥ Images pulled: {{ image_list.stdout_lines | length }}
      üîß NVIDIA runtime: Configured
      üìÑ Compose files: Valid
      üöÄ Ready for container deployment
